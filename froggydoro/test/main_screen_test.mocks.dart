// Mocks generated by Mockito 5.4.5 from annotations
// in froggydoro/test/main_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i2;
import 'package:froggydoro/models/timerObject.dart' as _i7;
import 'package:froggydoro/notifications.dart' as _i4;
import 'package:froggydoro/services/database_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i9;
import 'package:sqflite/sqflite.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterLocalNotificationsPlugin_0 extends _i1.SmartFake
    implements _i2.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeDatabase_1 extends _i1.SmartFake implements _i3.Database {
  _FakeDatabase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Notifications].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotifications extends _i1.Mock implements _i4.Notifications {
  @override
  _i2.FlutterLocalNotificationsPlugin get flutterLocalNotificationsPlugin =>
      (super.noSuchMethod(
            Invocation.getter(#flutterLocalNotificationsPlugin),
            returnValue: _FakeFlutterLocalNotificationsPlugin_0(
              this,
              Invocation.getter(#flutterLocalNotificationsPlugin),
            ),
            returnValueForMissingStub: _FakeFlutterLocalNotificationsPlugin_0(
              this,
              Invocation.getter(#flutterLocalNotificationsPlugin),
            ),
          )
          as _i2.FlutterLocalNotificationsPlugin);

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> showNotification({
    required int? id,
    required String? title,
    required String? body,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#showNotification, [], {
              #id: id,
              #title: title,
              #body: body,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> scheduleNotification({
    required int? id,
    required String? title,
    required String? body,
    required DateTime? scheduledTime,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleNotification, [], {
              #id: id,
              #title: title,
              #body: body,
              #scheduledTime: scheduledTime,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelNotification(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#cancelNotification, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i6.DatabaseService {
  @override
  _i5.Future<_i3.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#database)),
            ),
            returnValueForMissingStub: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.getter(#database)),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  _i5.Future<_i3.Database> getDatabase() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabase, []),
            returnValue: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.method(#getDatabase, [])),
            ),
            returnValueForMissingStub: _i5.Future<_i3.Database>.value(
              _FakeDatabase_1(this, Invocation.method(#getDatabase, [])),
            ),
          )
          as _i5.Future<_i3.Database>);

  @override
  void addTimer(
    String? name,
    int? workDuration,
    int? breakDuration, {
    int? count = 4,
    int? isPicked = 0,
  }) => super.noSuchMethod(
    Invocation.method(
      #addTimer,
      [name, workDuration, breakDuration],
      {#count: count, #isPicked: isPicked},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<List<_i7.TimerObject>> getTimers() =>
      (super.noSuchMethod(
            Invocation.method(#getTimers, []),
            returnValue: _i5.Future<List<_i7.TimerObject>>.value(
              <_i7.TimerObject>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i7.TimerObject>>.value(
              <_i7.TimerObject>[],
            ),
          )
          as _i5.Future<List<_i7.TimerObject>>);

  @override
  _i5.Future<_i7.TimerObject?> getPickedTimer() =>
      (super.noSuchMethod(
            Invocation.method(#getPickedTimer, []),
            returnValue: _i5.Future<_i7.TimerObject?>.value(),
            returnValueForMissingStub: _i5.Future<_i7.TimerObject?>.value(),
          )
          as _i5.Future<_i7.TimerObject?>);

  @override
  void updateTimer(
    int? id,
    String? name,
    int? workDuration,
    int? breakDuration, {
    int? count = 4,
  }) => super.noSuchMethod(
    Invocation.method(
      #updateTimer,
      [id, name, workDuration, breakDuration],
      {#count: count},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void deleteTimer(int? id) => super.noSuchMethod(
    Invocation.method(#deleteTimer, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void setPicked(int? id) => super.noSuchMethod(
    Invocation.method(#setPicked, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TimerObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerObject extends _i1.Mock implements _i7.TimerObject {
  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i8.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i8.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  int get workDuration =>
      (super.noSuchMethod(
            Invocation.getter(#workDuration),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get breakDuration =>
      (super.noSuchMethod(
            Invocation.getter(#breakDuration),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get count =>
      (super.noSuchMethod(
            Invocation.getter(#count),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get isPicked =>
      (super.noSuchMethod(
            Invocation.getter(#isPicked),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i9.SharedPreferences {
  @override
  Set<String> getKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getKeys, []),
            returnValue: <String>{},
            returnValueForMissingStub: <String>{},
          )
          as Set<String>);

  @override
  Object? get(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#get, [key]),
            returnValueForMissingStub: null,
          )
          as Object?);

  @override
  bool? getBool(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getBool, [key]),
            returnValueForMissingStub: null,
          )
          as bool?);

  @override
  int? getInt(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getInt, [key]),
            returnValueForMissingStub: null,
          )
          as int?);

  @override
  double? getDouble(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getDouble, [key]),
            returnValueForMissingStub: null,
          )
          as double?);

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getString, [key]),
            returnValueForMissingStub: null,
          )
          as String?);

  @override
  bool containsKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#containsKey, [key]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getStringList, [key]),
            returnValueForMissingStub: null,
          )
          as List<String>?);

  @override
  _i5.Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#setBool, [key, value]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
            Invocation.method(#setInt, [key, value]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
            Invocation.method(#setDouble, [key, value]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
            Invocation.method(#setString, [key, value]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
            Invocation.method(#setStringList, [key, value]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> remove(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#remove, [key]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> commit() =>
      (super.noSuchMethod(
            Invocation.method(#commit, []),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> reload() =>
      (super.noSuchMethod(
            Invocation.method(#reload, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
