// Mocks generated by Mockito 5.4.5 from annotations
// in froggydoro/test/settings_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:froggydoro/models/timerObject.dart' as _i5;
import 'package:froggydoro/services/database_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<_i2.Database> getDatabase() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabase, []),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.method(#getDatabase, [])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.method(#getDatabase, [])),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  void addTimer(
    String? name,
    int? workDuration,
    int? breakDuration, {
    int? count = 4,
    int? isPicked = 0,
  }) => super.noSuchMethod(
    Invocation.method(
      #addTimer,
      [name, workDuration, breakDuration],
      {#count: count, #isPicked: isPicked},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<_i5.TimerObject>> getTimers() =>
      (super.noSuchMethod(
            Invocation.method(#getTimers, []),
            returnValue: _i4.Future<List<_i5.TimerObject>>.value(
              <_i5.TimerObject>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i5.TimerObject>>.value(
              <_i5.TimerObject>[],
            ),
          )
          as _i4.Future<List<_i5.TimerObject>>);

  @override
  _i4.Future<_i5.TimerObject?> getPickedTimer() =>
      (super.noSuchMethod(
            Invocation.method(#getPickedTimer, []),
            returnValue: _i4.Future<_i5.TimerObject?>.value(),
            returnValueForMissingStub: _i4.Future<_i5.TimerObject?>.value(),
          )
          as _i4.Future<_i5.TimerObject?>);

  @override
  void updateTimer(
    int? id,
    String? name,
    int? workDuration,
    int? breakDuration, {
    int? count = 4,
  }) => super.noSuchMethod(
    Invocation.method(
      #updateTimer,
      [id, name, workDuration, breakDuration],
      {#count: count},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void deleteTimer(int? id) => super.noSuchMethod(
    Invocation.method(#deleteTimer, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void setPicked(int? id) => super.noSuchMethod(
    Invocation.method(#setPicked, [id]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [TimerObject].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimerObject extends _i1.Mock implements _i5.TimerObject {
  @override
  int get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#name)),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#name),
            ),
          )
          as String);

  @override
  int get workDuration =>
      (super.noSuchMethod(
            Invocation.getter(#workDuration),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get breakDuration =>
      (super.noSuchMethod(
            Invocation.getter(#breakDuration),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get count =>
      (super.noSuchMethod(
            Invocation.getter(#count),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  int get isPicked =>
      (super.noSuchMethod(
            Invocation.getter(#isPicked),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);
}
